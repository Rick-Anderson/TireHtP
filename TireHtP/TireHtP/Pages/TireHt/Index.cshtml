@page
@model TireHtP.Pages.TireHt.IndexModel

@{
    ViewData["Title"] = "Index";
}

<h1>Tire drop vs. Pressure</h1>

<p>
    <a asp-page="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Tire[0].Height)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Tire[0].Width)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Tire)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Height)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Width)
                </td>
                <td>
                    <a asp-page="./Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-page="./Details" asp-route-id="@item.Id">Details</a> |
                    <a asp-page="./Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<h2> Axle Height vs. PSI </h2>
<h3> static lift (drop): Dynamic lift (drop)</h3>

<table class="table">

    <thead>
        <tr>
            <th>PSI</th>

            @foreach (var item in Model.Tire)
            {
                var maxHt = item.Height / 2.0;
                <th>
                    @item.Height X @item.Width (Static:Dynamic)
                </th>
            }
        </tr>
    </thead>

    <tbody>


        @{  double psi = Model.Tire[0].MaxPSI;
            double diff = 0.0;

            while (psi > 1)
            {
                <tr>

                    <td>
                        @psi
                    </td>
                    @foreach (var item in Model.Tire)
                    {

                        <td>
                            @{
                                var b = item.Weight / psi / item.Width / 2.0;
                                var lift = Math.Round(Math.Sqrt(item.Height * item.Height / 4.0 - b * b), 2);
                                diff = Math.Round(item.Height / 2.0 - lift, 2);

                                // dynLift use 3 times static weight. 3*3 == 9;
                                var dynLift = Math.Round(Math.Sqrt(item.Height * item.Height / 4.0 - b * b * 9), 2);
                                var dynDiff = Math.Round(item.Height / 2.0 - dynLift, 2);
                                string str_dynDiff = dynDiff.ToString();
                                string str_dynLift = (dynLift > (item.WheelDiameter / 2.0 - .5) || dynLift.ToString().Equals("NaN") != true)
                                    ? dynLift.ToString() : "Rim";

                                if (str_dynLift.Equals("Rim"))
                                {
                                    str_dynDiff = "X";
                                }
                            }
                            @lift (@diff) : @str_dynLift (@str_dynDiff)
                        </td>

                    }
                </tr>
                if (@diff < .1)
                {
                    psi -= 3.0;
                }
                else
                {
                    psi -= 1.0;
                }
            }
        }
    </tbody>

</table>


